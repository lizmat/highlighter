=begin pod

=head1 NAME

highlighter - highlight something inside a string

=head1 SYNOPSIS

=begin code :lang<raku>

use highlighter;

say highlighter "foo bar", "bar", "<b>", "</b>", :type<words>; # foo <b>bar</b>

say highlighter "foo bar", "O", "*", :type<contains>, :ignorecase; # f*o**o* bar

say highlighter "foo bar", "fo", "*", :type<starts-with>;      # *fo*o bar

say highlighter "foo bar", "ar", "*", :type<ends-with>;        # foo b*ar*

say highlighter "foo bar", / b.r /, "*";                       # foo *bar*


say columns "foo bar", "bar", :type<words>;       # (5)

say columns "foo bar", "O", :type<contains>, :ignorecase; # (2,3)

say columns "foo bar", "fo", :type<starts-with>;  # (1)

say columns "foo bar", "ar", :type<ends-with>;    # (6)

say columns "foo bar", / b.r /;                   # (5)


say matches "foo bar", "bar", :type<words>;       # bar

say matches "foo bar", "O", :type<contains>, :ignorecase; # o o

say matches "foo bar", "fo", :type<starts-with>;  # fo

say matches "foo bar", "ar", :type<ends-with>;    # ar

say matches "foo bar", / b.r /;                   # bar

=end code

=head1 DESCRIPTION

The highlighter distribution exports a multi-dispatch subroutine
C<highlighter> that can be called to highlight a word, a string or the
match of a regular expression inside a string.

It also exports a multi-dispatch subroutine C<columns> that returns the
columns (1-based) at which highlighting should occur.

And it also exports a multi-dispatch subroutine C<matches> that returns
the actual matches inside the string as a C<Slip>.

All candidates of the C<highlighter> subroutine take 4 positional
parameters.  All candidates of the C<columns> and C<matches> subroutine
take 2 positional parameters (with the same meaning of the first 2
positional parameters of C<highlighter>):

=item haystack

This is the string in which things should be highlighted.

=item needle

This is either a string, or a regular expression indicating what should be
highlighted.

=item before

This is the string that should be put B<before> the thing that should be
highlighted.  Only applicable with C<highlighter>.

=item after

Optional.  This is the string that should be put B<after> the thing that
should be highlighted.  Defaults to the C<before> string>.  Only
applicable with C<highlighter>.

The following optional B<named> arguments can also be specified:

=item :type

Optional named argument.  If the needle is a regular expression, it is
ignored.  Otherwise C<"contains"> is assumed.

It indicates the type of search that should be performed.  Possible options
are C<words> (look for the needle at word boundaries only), C<contains> (look
for the needle at any position), C<starts-with> (only look for the needle
at the start of the string) and C<ends-with> (only look for the needle at
the end of the string).

=item :ignorecase or :i

Optional named argument.  If the second positional argument is a string,
then this indicates whether any searches should be done in a case
insensitive manner.

=item :ignoremark or :m

Optional named argument.  If the second positional argument is a string,
then this indicates whether any searches should be done on the base
characters only.

=item :only

Optional named argument.  Indicates that only the strings that were found
should be returned (and not have anything inbetween, except for any
C<before> and C<after> strings).  Defaults to C<False>.  Only applicable
to C<highlighter>.

=item :summary-if-larger-than

Optional named argument.  Indicates the number of characters a string
must exceed to have the non-highlighted parts shortened to try to fit
the indicated number of characters.  Defaults to C<Any>, indicate no
summarizing should take place.  Only applicable to C<highlighter>.

=head1 NOTES

=head2 Callable as a needle

If a simple C<Callable> (rather than a C<Regex>) is passed as a needle,
then the haystack will B<always> be returned, as there is no way to
determine what will need to be highlighted.  Any other arguments, apart
from the C<:summary-if-larger-than> named argument, will be ignored.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

=head1 COPYRIGHT AND LICENSE

Copyright 2021, 2022 Elizabeth Mattijsen

Source can be located at: https://github.com/lizmat/highlighter .
Comments and Pull Requests are welcome.

If you like this module, or what Iâ€™m doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

This library is free software; you can redistribute it and/or modify it
under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
